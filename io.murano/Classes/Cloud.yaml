Namespaces:
    =: io.murano
    res: io.murano.resources
    sys: io.murano.system

Name: Cloud

Properties:
  name:
    Contract: $.string().notNull()

  regionName:
    Contract: $.string()

  stack:
    Contract: $.class(sys:HeatStack)
    Usage: Runtime

  defaultNetworks:
    Contract:
      environment: $.class(res:Network)
      flat: $.class(res:Network)
    Usage: In

  securityGroupManager:
    Contract: $.class(sys:SecurityGroupManager)
    Usage: Runtime

Methods:
  initialize:
    Body:
      - $generatedCloudName: $.getAttr(generatedCloudName)
      - If: $generatedCloudName = null
        Then:
          - $generatedCloudName: randomName()
          - $.setAttr(generatedCloudName, $generatedCloudName)
      - $stackDescriptionFormat: 'This stack was generated by Murano for environment {0} (ID: {1})'
      - $this.stack: new(sys:HeatStack,
            name => 'murano-' + $generatedCloudName,
            description => $stackDescriptionFormat.format($.name, $.id()),
            regionName => $.regionName
          )
      - If: $.defaultNetworks.environment = null and $.defaultNetworks.flat = null
        Then:
          $this.securityGroupManager: new(sys:AwsSecurityGroupManager, cloud => $this)
        Else:
          $this.securityGroupManager: new(sys:NeutronSecurityGroupManager, cloud => $this)

  destroy:
    Body:
      - $.stack.delete()

  getFloatingIpPoolName:
    Arguments:
      availabilityZone:
        Contract: $.string().notNull()
        Default: nova
    Body:
      - $map:
          'DEFAULT':
            'DEFAULT': 'nova'

      - $regionName: coalesce($.regionName, '')
      - $cloud: coalesce($map.get($regionName), $map.get('DEFAULT'))
      - $pool: coalesce($cloud.get($availabilityZone), $cloud.get('DEFAULT'))
      - Return: $pool
